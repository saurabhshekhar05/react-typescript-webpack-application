import React from "react"

const { useState } = React

// Utility and Callback Functions
const getData = async (endpoint: string) => {
    const response = await fetch(endpoint)
    const data: UserResults = await response.json()
    return data
}

const print = (message: string) => {
    return console.log(message)
}

const parseUserData = (user: Result) => {
    const { name, email, dob } = user
    return {
        name: `${name.first} ${name.last}`,
        email,
        age: dob.age
    }
}

const generateUserCard = (user: TUser, key: number) => {
    const { name, email, age } = user
    return (
        <div key={key} className="card">
            <div>
                <strong>Name:</strong>
                <span>{name}</span>
            </div>
            <div>
                <strong>Email:</strong>
                <span>{email}</span>
            </div>
            <div>
                <strong>Age:</strong>
                <span>{age}</span>
            </div>
        </div>
    )
}

// React Components
const App: React.FC = () => {
    const [state, setState] = useState({
        users: [],
        greeting: 'Fetching Data With TypeScript and React'
    })

    const fetchUsers = async () => {
        const userData = await getData('https://randomuser.me/api/?results=21')
        const results = userData.results
        const users = results.map(parseUserData)
        return setState({ ...state, users: [...users] })
    }

    const { greeting, users } = state
    const hasUsers = users.length > 0
    return (
        <div>
            <h1>{greeting}</h1>
            <button onClick={() => fetchUsers()}>Fetch Users</button>
            <div>
                {hasUsers ? <Users users={users} /> : null}
            </div>
        </div>
    )
}

const Users = ({ users }: TUserProps) => {
    const hasUsers = users !== undefined
    return (
        <div className="container">
            {hasUsers ? users!.map(generateUserCard) : null}
        </div>
    )
}


// Types Generated by https://quicktype.io
type TState = { users: TUser[]; greeting: string }
type TUserProps = { users: TUser[] | undefined }
type TUser = {
    name: string
    email: string
    age: string
}

interface UserResults {
    results: Result[];
    info: Info;
}

interface Info {
    seed: string;
    results: number;
    page: number;
    version: string;
}

interface Result {
    gender: Gender;
    name: Name;
    location: Location;
    email: string;
    login: Login;
    dob: Dob;
    registered: Dob;
    phone: string;
    cell: string;
    id: ID;
    picture: Picture;
    nat: string;
}

interface Dob {
    date: string;
    age: number;
}

enum Gender {
    Female = "female",
    Male = "male",
}

interface ID {
    name: string;
    value: null | string;
}

interface Location {
    street: string;
    city: string;
    state: string;
    postcode: number | string;
    coordinates: Coordinates;
    timezone: Timezone;
}

interface Coordinates {
    latitude: string;
    longitude: string;
}

interface Timezone {
    offset: string;
    description: string;
}

interface Login {
    uuid: string;
    username: string;
    password: string;
    salt: string;
    md5: string;
    sha1: string;
    sha256: string;
}

interface Name {
    title: string;
    first: string;
    last: string;
}

interface Picture {
    large: string;
    medium: string;
    thumbnail: string;
}
